(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{357:function(t,a,s){t.exports=s.p+"assets/img/data.913e0aba.jpg"},358:function(t,a,s){t.exports=s.p+"assets/img/data2.497a3f12.jpg"},373:function(t,a,s){"use strict";s.r(a);var v=s(43),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据结构与算法概览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法概览"}},[t._v("#")]),t._v(" 数据结构与算法概览")]),t._v(" "),v("p",[t._v("最近开始学习数据结构与算法，这里就当总结记录一下。")]),t._v(" "),v("h2",{attrs:{id:"什么是数据结构？什么是算法？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据结构？什么是算法？"}},[t._v("#")]),t._v(" 什么是数据结构？什么是算法？")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。")])]),t._v(" "),v("li",[v("p",[t._v("从狭义上讲，是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。")])])]),t._v(" "),v("h2",{attrs:{id:"数据结构与算法的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法的关系"}},[t._v("#")]),t._v(" 数据结构与算法的关系")]),t._v(" "),v("ul",[v("li",[t._v("数据结构是为算法服务的，算法要作用在特定的数据结构之上。")])]),t._v(" "),v("h2",{attrs:{id:"数据结构与算法概览-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法概览-2"}},[t._v("#")]),t._v(" 数据结构与算法概览")]),t._v(" "),v("p",[t._v("下面这张图里面几乎涵盖了所有数据结构和算法书籍中都会讲到的知识点。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(357),alt:"selection2"}})]),t._v(" "),v("p",[t._v("这里总结 20 个最常用的、最基础数据结构与算法。")]),t._v(" "),v("ul",[v("li",[t._v("10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树。")]),t._v(" "),v("li",[t._v("10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。")])]),t._v(" "),v("h2",{attrs:{id:"复杂度分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[t._v("#")]),t._v(" 复杂度分析")]),t._v(" "),v("p",[t._v("数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。")]),t._v(" "),v("p",[v("strong",[t._v("复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。")])]),t._v(" "),v("h2",{attrs:{id:"大-o-复杂度表示法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大-o-复杂度表示法"}},[t._v("#")]),t._v(" 大 O 复杂度表示法")]),t._v(" "),v("p",[v("strong",[t._v("大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。")])]),t._v(" "),v("h2",{attrs:{id:"时间复杂度分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度分析"}},[t._v("#")]),t._v(" 时间复杂度分析")]),t._v(" "),v("p",[v("strong",[t._v("时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。")])]),t._v(" "),v("p",[t._v("如何分析一段代码的时间复杂度？这里有三个比较实用的方法。")]),t._v(" "),v("ol",[v("li",[t._v("只关注循环执行次数最多的一段代码")]),t._v(" "),v("li",[t._v("加法法则：总复杂度等于量级最大的那段代码的复杂度")]),t._v(" "),v("li",[t._v("乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")])]),t._v(" "),v("h2",{attrs:{id:"空间复杂度分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度分析"}},[t._v("#")]),t._v(" 空间复杂度分析")]),t._v(" "),v("p",[v("strong",[t._v("空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。")])]),t._v(" "),v("h2",{attrs:{id:"几种常见的复杂度量级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#几种常见的复杂度量级"}},[t._v("#")]),t._v(" 几种常见的复杂度量级")]),t._v(" "),v("p",[t._v("常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)，几乎所有的数据结构和算法的复杂度都跑不出这几个。")]),t._v(" "),v("p",[t._v("所有代码的执行时间 "),v("code",[t._v("T(n)")]),t._v(" 与每行代码的执行次数 "),v("code",[t._v("n")]),t._v(" 成正比。如图：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(358),alt:"selection2"}})])])}),[],!1,null,null,null);a.default=_.exports}}]);